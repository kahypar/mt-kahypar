/*******************************************************************************
 * MIT License
 *
 * This file is part of Mt-KaHyPar.
 *
 * Copyright (C) 2019 Tobias Heuer <tobias.heuer@kit.edu>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 ******************************************************************************/

#include "gtest/gtest.h"

#include <vector>
#include <unordered_map>
#include <set>
#include <cstring>
#include <fstream>

#include <boost/program_options.hpp>

#include "mt-kahypar/partition/context.h"
#include "mt-kahypar/io/command_line_options.h"
#include "mt-kahypar/io/presets.h"

namespace po = boost::program_options;

using ::testing::Test;

#define MT_KAHYPAR_CONFIG_DIR "@PROJECT_SOURCE_DIR@/config/"

namespace mt_kahypar {

// comparison result and whether the type was known
std::pair<bool, bool> variableValIsEqual(po::variable_value lhs, po::variable_value rhs) {
  if (lhs.value().type() != rhs.value().type()) {
    return {false, true};
  }
  bool* bool_val = boost::any_cast<bool>(&lhs.value());
  if (bool_val != nullptr) {
    return {*bool_val == rhs.as<bool>(), true};
  }
  size_t* size_t_val = boost::any_cast<size_t>(&lhs.value());
  if (size_t_val != nullptr) {
    return {*size_t_val == rhs.as<size_t>(), true};
  }
  int* int_val = boost::any_cast<int>(&lhs.value());
  if (int_val != nullptr) {
    return {*int_val == rhs.as<int>(), true};
  }
  HypernodeID* id_val = boost::any_cast<HypernodeID>(&lhs.value());
  if (id_val != nullptr) {
    return {*id_val == rhs.as<HypernodeID>(), true};
  }
  double* float_val = boost::any_cast<double>(&lhs.value());
  if (float_val != nullptr) {
    return {*float_val == rhs.as<double>(), true};
  }
  long double* ld_val = boost::any_cast<long double>(&lhs.value());
  if (ld_val != nullptr) {
    return {*ld_val == rhs.as<long double>(), true};
  }
  std::string* string_val = boost::any_cast<std::string>(&lhs.value());
  if (string_val != nullptr) {
    return {*string_val == rhs.as<std::string>(), true};
  }
  std::vector<bool>* flag_val = boost::any_cast<std::vector<bool>>(&lhs.value());
  if (flag_val != nullptr) {
    auto actual_flags = *flag_val;
    auto expected_flags = rhs.as<std::vector<bool>>();
    if (actual_flags.size() != expected_flags.size()) {
      return {false, true};
    }
    for (size_t i = 0; i < actual_flags.size(); ++i) {
      if (actual_flags[i] != expected_flags[i]) {
      return {false, true};
      }
    }
    return {true, true};
  }
  return {true, false};
}

void comparePresetWithIniFile(PresetType preset, std::string ini_filename) {
  Context dummy_context;
  auto ini_line_options = getIniOptionsDescription(dummy_context);

  po::variables_map actual;
  auto option_list = loadPreset(preset);
  po::basic_parsed_options<char> options(&ini_line_options);
  options.options = option_list;
  po::store(options, actual);
  po::notify(actual);

  po::variables_map expected;
  std::ifstream file(ini_filename.c_str());
  if (!file) {
    throw InvalidInputException(
      "Could not load context file at: " + ini_filename);
  }
  po::store(po::parse_config_file(file, ini_line_options, false), expected);
  po::notify(expected);

  for (auto [key, val]: actual) {
    auto [equal, success] = variableValIsEqual(val, expected[key]);
    if (!equal) {
      LOG << "diverging config value for:" << key;
    }
    ASSERT_TRUE(equal);
    if (!success) {
      LOG << "missed:" << key;
    }
  }
  for (auto [key, val]: expected) {
    auto [equal, success] = variableValIsEqual(actual[key], val);
    if (!equal) {
      LOG << "diverging config value for:" << key;
    }
    ASSERT_TRUE(equal);
    if (!success) {
      LOG << "missed:" << key;
    }
  }
}

TEST(AContext, LoadsDefaultPresetCorrectly) {
  comparePresetWithIniFile(PresetType::default_preset, std::string(MT_KAHYPAR_CONFIG_DIR) + "default_preset.ini");
}

TEST(AContext, LoadsQualityPresetCorrectly) {
  comparePresetWithIniFile(PresetType::quality, std::string(MT_KAHYPAR_CONFIG_DIR) + "quality_preset.ini");
}

TEST(AContext, LoadsDeterministicPresetCorrectly) {
  comparePresetWithIniFile(PresetType::deterministic, std::string(MT_KAHYPAR_CONFIG_DIR) + "deterministic_preset.ini");
}

#ifdef KAHYPAR_ENABLE_HIGHEST_QUALITY_FEATURES
TEST(AContext, LoadsHighestQualityPresetCorrectly) {
  comparePresetWithIniFile(PresetType::highest_quality, std::string(MT_KAHYPAR_CONFIG_DIR) + "highest_quality_preset.ini");
}
#endif

#ifdef KAHYPAR_ENABLE_LARGE_K_PARTITIONING_FEATURES
TEST(AContext, LoadsLargeKPresetCorrectly) {
  comparePresetWithIniFile(PresetType::large_k, std::string(MT_KAHYPAR_CONFIG_DIR) + "large_k_preset.ini");
}
#endif

}  // namespace mt_kahypar
